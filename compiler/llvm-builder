#!/usr/bin/env bash
#
# Copyright 2020 WorkGroup Participants. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -e

SCRIPT_DIR="$(cd "$(dirname "$0")"; pwd -P)"
BUILD_ROOT_DIR=`pwd`

LLVM_SRC_ROOT=`pwd`
ENABLE_NINJA=true # false
ENABLE_CCACHE=true # false
BUILD_TYPE=Debug #RelWithDebInfo
BUILD_FORCE=false
BUILD_JOBS=2
LLVM_CCACHE_SIZE="50.0G"

function usage() {
    cat << EOF
    Usage: $0 [options]
    Options:
    -h|--help         This Message.
    -f|--force        Force Building.
    --ninja           Build With ninja (default is makefile)
    --ccache          Build With ccache
    --ccache-size n   Build With ccache-size
    --build    path   Build Project in path directiry
    --llvm     path   LLVM Project to be built
    --install  path   LLVM release directory to install
    -d|--debug        Build With Debug Mode (default)
    -r|--release      Build With Release Mode
    -j|--jobs  n      Build Jobs
EOF
}

function options_parse() {
    while test $# -gt 0; do
        case "$1" in
            --llvm)
              shift
              if [ x"$1" != x"-*" ];then
                LLVM_SRC_ROOT=$1
              fi
              ;;
            --install)
              shift
              if [ x"$1" != x"-*" ];then
                LLVM_INSTALL=$1
              fi
              ;;
            --build)
              shift
              if [ x"$1" != x"-*" ];then
                BUILD_ROOT_DIR=$1
              fi
              ;;
            --ninja)
                ENABLE_NINJA=true
                ;;
            --disable-ninja)
                ENABLE_NINJA=false
                ;;
            --ccache)
                ENABLE_CCACHE=true
                ;;
            --ccache-size)
                shift
                if [ x"$1" != x"-*" ];then
                  LLVM_CCACHE_SIZE=$1
                fi
                ;;
            -j|--jobs)
                shift
                if [ x"$1" != x"-*" ];then
                  BUILD_JOBS=$1
                fi
                ;;
            --disable-ccache)
                ENABLE_CCACHE=false
                ;;
            -d|--debug)
                BUILD_TYPE=Debug
                ;;
            -r|--release)
                BUILD_TYPE=Release
                ;;
            -f|--force)
                BUILD_FORCE=true
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                LLVM_SRC_ROOT="$1"
                ;;
        esac
        shift
    done
}

# parse cli options
echo $0 $@
options_parse $@

LLVM_INSTALL="LLVMFor${BUILD_TYPE}"

timestamp_begin=$(date +%Y-%m-%d_%H-%M-%S)

INSTALL_ROOT=${BUILD_ROOT_DIR}/${LLVM_INSTALL}
LLVM_CCACHE_ROOT=${BUILD_ROOT_DIR}/llvm-ccache
LLVM_OBJ_ROOT=${BUILD_ROOT_DIR}/llvm-build
if [ ! -d ${LLVM_OBJ_ROOT} ];then
    mkdir -p ${LLVM_OBJ_ROOT}
fi

if [ x"${LLVM_SRC_ROOT:0:1}" != x"/" ]; then
    LLVM_SRC_ROOT=`pwd`/${LLVM_SRC_ROOT}
fi

LLVM_OSX_ARCHITECTURES="arm64"
LLVM_BUILD_TARGETS="AArch64;ARM;WebAssembly;X86"
LLVM_BUILD_PROJECTS="clang;clang-tools-extra;lld;lldb;mlir"
# LLVM_BUILD_RUNTIMES="libc;libunwind;libcxxabi;libcxx;compiler-rt"
LLVM_BUILD_RUNTIMES="libunwind;libcxxabi;libcxx;compiler-rt"
echo "# ------------- llvm-project build config -------------- #""
echo "SCRIPT_DIR             : ${SCRIPT_DIR}"
echo "BUILD_ROOT_DIR         : ${BUILD_ROOT_DIR}"
echo "SRC_DIR                : ${LLVM_SRC_ROOT}"
echo "INSTALL_ROOT           : ${INSTALL_ROOT}"
echo "ENABLE_NINJA           : ${ENABLE_NINJA}"
echo "ENABLE_CCACHE          : ${ENABLE_CCACHE}"
echo "CCACHE_DIR             : ${LLVM_CCACHE_ROOT}"
echo "CCACHE_SIZE            : ${LLVM_CCACHE_SIZE}"
echo "LLVM_TARGETS_TO_BUILD" : ${LLVM_BUILD_TARGETS}
echo "LLVM_BUILD_PROJECTS"   : ${LLVM_BUILD_PROJECTS}
echo "current dir            : `pwd`"

# ------------- build llvm-project -------------- #"
LLVM_BUILD_ARGS="\
    -DCMAKE_INSTALL_PREFIX=${INSTALL_ROOT} \
    -DCMAKE_PREFIX_PATH=${INSTALL_ROOT} \
    -DCMAKE_BUILD_TYPE=${BUILD_TYPE} \
    -DLLVM_ENABLE_DUMP=ON \
    -DLLVM_CCACHE_BUILD=ON \
    -DLLVM_INCLUDE_TESTS=Off \
    -DLLVM_ENABLE_BACKTRACES=Off \
    -DCMAKE_OSX_ARCHITECTURES=${LLVM_OSX_ARCHITECTURES} \
    -DLLVM_CCACHE_MAXSIZE=${LLVM_CCACHE_SIZE} \
    -DLLVM_CCACHE_DIR=${LLVM_CCACHE_ROOT} \
    -DLLVM_ENABLE_PROJECTS=${LLVM_BUILD_PROJECTS} \
    -DLLVM_ENABLE_RUNTIMES=${LLVM_BUILD_RUNTIMES} \
    -DLLVM_TARGETS_TO_BUILD=${LLVM_BUILD_TARGETS}"

cmake_exe=cmake
make_exe=make
command -v ninja >/dev/null 2>&1 && ${ENABLE_NINJA} && {
    echo >&2 "try to build with ninja!"
    cmake_exe="cmake -G Ninja"
    make_exe=ninja
    # LLVM_OBJ_ROOT=${LLVM_OBJ_ROOT}/ninja
    if [ ! -d ${LLVM_OBJ_ROOT} ];then
        mkdir -p ${LLVM_OBJ_ROOT}
    fi
}

command -v ccache >/dev/null 2>&1 && ${ENABLE_CCACHE} || {
  echo "please install ccache beforehand!"
  exit -1
}

if [ x"false" == x"${BUILD_FORCE}" ];then
if [ -z $1 ];then
    echo ""
    read -p "use default work directory : ${BUILD_ROOT_DIR} [y/n]" options
    if [ x$options != x'y' ];then
        exit
    fi
fi
fi

cd $LLVM_OBJ_ROOT
echo "$cmake_exe ${LLVM_BUILD_ARGS} ${LLVM_SRC_ROOT}/llvm"
if [ x"false" == x"${BUILD_FORCE}" ];then
    echo ""
    read -p "try to build the llvm projects in ${BUILD_ROOT_DIR} ... [y/n]" option
    if [ x"y" != x${option} ];then
        exit 0
    fi
fi

set -x
# sleep 5
${cmake_exe} ${LLVM_BUILD_ARGS} ${LLVM_SRC_ROOT}/llvm
${make_exe} -j ${BUILD_JOBS}
${make_exe} install

set +x
timestamp_end=$(date +%Y-%m-%d_%H-%M-%S)
echo "[${timestamp_begin}, ${timestamp_end}]"

echo "~_~"
echo "llvm building complete ..."
