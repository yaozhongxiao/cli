#!/usr/bin/env bash
#
# Copyright 2020 WorkGroup Participants. All rights reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author : zhongxiao.yzx@gmail.com
# Date   : 2020-07-01
#
###########################################################################
set -e

SCRIPT_DIR="$(cd "$(dirname "$0")"; pwd -P)"
ROOT_DIR=`pwd`
INSTALL_ROOT=${ROOT_DIR}/release
ENABLE_NINJA=false # false
Build_Type=Debug
BUILD_FORCE=false

function usage() {
    cat << EOF
    Usage: $0 [options]
    Options:
    -h|--help         This Message.
    -f|--force        Force Building.
    --ninja           Build With ninja (default is makefile)
    -d|--debug        Build With Debug Mode (default)
    -r|--release      Build With Release Mode
EOF
}

function options_parse() {
    while test $# -gt 0; do
        case "$1" in
            --ninja)
                ENABLE_NINJA=true
                ;;
            -d|--debug)
                Build_Type=Debug
                ;;
            -r|--release)
                Build_Type=Release
                ;;
            -f|--force)
                BUILD_FORCE=true
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
            echo "Unknown option \"$1\"." >&2
                usage
                exit 1
                ;;
        esac
        shift
    done
}

# parse cli options
echo $0 $@
options_parse $@

echo "SCRIPT_DIR   : ${SCRIPT_DIR}"
echo "ROOT_DIR     : ${ROOT_DIR}"
echo "INSTALL_ROOT : ${INSTALL_ROOT}"
echo "ENABLE_NINJA : ${ENABLE_NINJA}"
echo "current dir : `pwd`"

# ------------- build llvm-project -------------- #"
LLVM_SRC_ROOT=${ROOT_DIR}/llvm-project
LLVM_OBJ_ROOT=${ROOT_DIR}/llvm-build
if [ ! -d ${LLVM_OBJ_ROOT} ];then
    mkdir -p ${LLVM_OBJ_ROOT}
fi
if [ ! -d ${INSTALL_ROOT} ];then
    mkdir -p ${INSTALL_ROOT}
fi

LLVM_BUILD_ARGS="\
    -DCMAKE_INSTALL_PREFIX=${INSTALL_ROOT} \
    -DCMAKE_PREFIX_PATH=${INSTALL_ROOT} \
    -DCMAKE_BUILD_TYPE=${Build_Type} \
    -DLLVM_ENABLE_PROJECTS=clang;clang-tools-extra;compiler-rt;libcxx;libcxxabi;libunwind;lld;lldb;"

cmake_exe="cmake"
make_exe="make"
command -v ninja >/dev/null 2>&1 && ${ENABLE_NINJA} && {
    echo >&2 "try to build with ninja!"
    cmake_exe="cmake -G Ninja"
    make_exe="ninja"
    # LLVM_OBJ_ROOT=${LLVM_OBJ_ROOT}/ninja
    if [ ! -d ${LLVM_OBJ_ROOT} ];then
        mkdir -p ${LLVM_OBJ_ROOT}
    fi
}

cd $LLVM_OBJ_ROOT
echo "$cmake_exe ${LLVM_BUILD_ARGS} ${LLVM_SRC_ROOT}/llvm"
if [ x"false" == x"${BUILD_FORCE}" ];then
    echo ""
    read -p "try to build the llvm projects ... [y/n]" option
    if [ x"y" != x${option} ];then
        exit 0
    fi
fi

set -x
# sleep 5
${cmake_exe} ${LLVM_BUILD_ARGS} ${LLVM_SRC_ROOT}/llvm
${make_exe} -j4
${make_exe} install

